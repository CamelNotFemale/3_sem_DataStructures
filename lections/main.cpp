#include <iostream>
// Лекция 02.10.2020
using namespace std;

int main()
{
    /* Перегрузка операторов
    operator #(); - синтаксис
    # - знак операции, нельзя придумывать любые, только существующие, нельзя изменять количество аргументов
    приоритет операции также неизменен:
    1)
    "::" и "." - уточнение области действия и точка не перегружаются
    2)
    (выражение), имя(), тип(выражение) - скобки можно перегружать
    [] индекс
    "->"
    "++", "--" - постфиксы
    3)
    ! ~ + - (одноместные)
    "++", "--" - префиксы
    "&" - взятие адреса
    "*" - разыменование
    (тип)выражение
    sizeof - не перегружается
    new, new[], delete, delete[], except
    4)
    ->*
    5)
    * / % - арифметические
    6)
    + - - сложение и вычитание
    7)
    << >> - сдвиги
    8)
    < > <= >= - сравнения
    9)
    == != - совпадение и несовпадение
    10) &
    11) ^
    12) |
    13) &&
    14) ||
    15) :? - не перегружаются(!)
    16) = *= /= <<= и т.д.
    17) throw
    18) , - запятая

    Группы связных операций
    i=i+1, i+=1, ++i, i++ - перегрузка одного из выражений не перегружает все остальные, требуется явно обозначить каждую из операций
    Разумнее использовать перегруженные операции в уже существующих библиотеках:
    = + += - string
    << >> - iostream
    */
    Set & Set:: operator |= (const Set &B)
    {
        for (int i=0; i< B.n; i++)
        {
            bool f = true;
            for (int j=0; j<n; ++j) // j<n == j<this.n
                if (B.A[j] == A[i]) f = false;
            if (f) A[n++] = B.A[i];
        }
        A[n]=0;
        return *this;
    }
    return 0;
}
